/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
// import { useRef, useEffect, useState } from "react";
import React, { forwardRef, useRef, useState, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useControls } from "leva";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Cat_Blob_1: THREE.SkinnedMesh;
    Cat_Blob_2: THREE.SkinnedMesh;
    Cat_Blob_3: THREE.SkinnedMesh;
    Cat_Blob_4: THREE.SkinnedMesh;
    Cat_Blob_5: THREE.SkinnedMesh;
    Body: THREE.Bone;
    Head: THREE.Bone;
  };
  materials: {
    Cat_Main: THREE.MeshStandardMaterial;
    Cat_Secondary: THREE.MeshStandardMaterial;
    Ears: THREE.MeshStandardMaterial;
    Eye_White: THREE.MeshStandardMaterial;
    Eye_Black: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName =
  | "CharacterArmature|Bite_Front"
  | "CharacterArmature|Dance"
  | "CharacterArmature|Death"
  | "CharacterArmature|HitRecieve"
  | "CharacterArmature|Idle"
  | "CharacterArmature|Jump"
  | "CharacterArmature|No"
  | "CharacterArmature|Walk"
  | "CharacterArmature|Yes";

const Cat = (props: JSX.IntrinsicElements["group"]) => {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "/models/Cat.glb"
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  const [currentAnimation, setCurrentAnimation] = useState<ActionName>(
    "CharacterArmature|Idle"
  );

  useEffect(() => {
    actions[currentAnimation]?.reset().fadeIn(0.5).play();

    return () => {
      actions[currentAnimation]?.fadeOut(0.5);
    };
  }, [currentAnimation]);

  useControls({
    animations: {
      options: [
        "CharacterArmature|Idle",
        "CharacterArmature|Dance",
        "CharacterArmature|Bite_Front",
        "CharacterArmature|Death",
        "CharacterArmature|HitRecieve",
        "CharacterArmature|Jump",
        "CharacterArmature|No",
        "CharacterArmature|Walk",
        "CharacterArmature|Yes",
      ],
      onChange: (e: ActionName) => {
        setCurrentAnimation(e);
      },
    },
  });

  const customCatMain = materials.Cat_Main;
  customCatMain.roughness = 1;
  const customCatSecondary = materials.Cat_Secondary;
  customCatSecondary.roughness = 1;

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group
            name="CharacterArmature"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes.Body} />
            <primitive object={nodes.Head} />
          </group>
          <group name="Cat_Blob" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Cat_Blob_1"
              geometry={nodes.Cat_Blob_1.geometry}
              material={customCatMain}
              skeleton={nodes.Cat_Blob_1.skeleton}
              castShadow
              receiveShadow
            />
            <skinnedMesh
              name="Cat_Blob_2"
              geometry={nodes.Cat_Blob_2.geometry}
              material={customCatSecondary}
              skeleton={nodes.Cat_Blob_2.skeleton}
              castShadow
              receiveShadow
            />
            <skinnedMesh
              name="Cat_Blob_3"
              geometry={nodes.Cat_Blob_3.geometry}
              material={materials.Ears}
              skeleton={nodes.Cat_Blob_3.skeleton}
              castShadow
              receiveShadow
            />
            <skinnedMesh
              name="Cat_Blob_4"
              geometry={nodes.Cat_Blob_4.geometry}
              material={materials.Eye_White}
              skeleton={nodes.Cat_Blob_4.skeleton}
              castShadow
              receiveShadow
            />
            <skinnedMesh
              name="Cat_Blob_5"
              geometry={nodes.Cat_Blob_5.geometry}
              material={materials.Eye_Black}
              skeleton={nodes.Cat_Blob_5.skeleton}
              castShadow
              receiveShadow
            />
          </group>
        </group>
      </group>
    </group>
  );
};

useGLTF.preload("/models/Cat.glb");

export default Cat;
