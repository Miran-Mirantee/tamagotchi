/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, useState, useEffect } from "react";
import {
  useGLTF,
  CameraControls,
  MeshPortalMaterial,
  PortalMaterialType,
  useCursor,
} from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useThree } from "@react-three/fiber";
import gsap from "gsap";
import useUIStore from "../stores/useUIStore";
import useCameraStore from "../stores/useCameraStore";
import { zoomTransition } from "../Utils/cameraController";

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh;
    Plane_1: THREE.Mesh;
    Plane_2: THREE.Mesh;
    Plane_3: THREE.Mesh;
  };
  materials: {
    screen: THREE.MeshStandardMaterial;
    body: THREE.MeshStandardMaterial;
    button: THREE.MeshStandardMaterial;
    crack: THREE.MeshStandardMaterial;
  };
};

export default function Tamagotchi({
  children,
  ...props
}: { children: React.ReactNode } & JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/models/tamagotchi.glb") as GLTFResult;
  const portal = useRef<PortalMaterialType | null>(null);
  const frame = useRef<THREE.Group | null>(null);
  const [hovered, hover] = useState(false);
  const setBackFunction = useUIStore((state) => state.setBackFunction);
  const setIsInside = useUIStore((state) => state.setIsInside);
  const isInside = useUIStore((state) => state.isInside);
  const isBrowsingFood = useUIStore((state) => state.isBrowsingFood);
  const enterFocusMode = useCameraStore((state) => state.enterFocusMode);
  const positionOffset = useCameraStore((state) => state.positionOffset);
  const { controls }: { controls: CameraControls } = useThree();

  useCursor(hovered);

  useEffect(() => {
    setBackFunction(back);
  }, [setBackFunction, controls]);

  useEffect(() => {
    if (isBrowsingFood) {
      // have to call this outside of the portal for correctly camera transition
      enterFocusMode();
    }
  }, [isBrowsingFood]);

  const back = () => {
    gsap.to(portal.current, {
      blend: 0,
      duration: 0.5,
    });
    zoomTransition(
      frame.current!,
      controls,
      { x: 0, y: 0, z: 7 },
      { x: 0, y: 0, z: 0 }
    );
    setIsInside(false);
  };

  const enter = () => {
    gsap.to(portal.current, {
      blend: 1,
      duration: 0.5,
    });
    zoomTransition(
      frame.current!,
      controls,
      { x: 0, y: 6 + positionOffset.y, z: 10 + positionOffset.z },
      { x: 0, y: 0 + positionOffset.y, z: 0 + positionOffset.z }
      // { x: 0, y: -0.5 + positionOffset.y, z: -3 + positionOffset.z }
    );
    setIsInside(true);
    hover(false);
  };

  return (
    <group {...props} dispose={null}>
      <group
        name="tatayung"
        position={[0, -0.252, 0]}
        rotation={[0, 0, 0]}
        scale={[1, 1, 1]}
      >
        <group ref={frame}>
          <mesh
            name="Plane"
            castShadow
            receiveShadow
            geometry={nodes.Plane.geometry}
            //   material={materials.screen}
            onPointerDown={(e) => {
              e.stopPropagation();
            }}
            onDoubleClick={() => {
              if (!isInside) {
                enter();
              }
            }}
            onPointerOver={(e) => {
              e.stopPropagation();
              if (!isInside) hover(true);
            }}
            onPointerOut={(e) => {
              e.stopPropagation();
              if (!isInside) hover(false);
            }}
          >
            <MeshPortalMaterial ref={portal} worldUnits>
              {children}
            </MeshPortalMaterial>
          </mesh>
        </group>

        <mesh
          name="Plane_1"
          castShadow
          receiveShadow
          geometry={nodes.Plane_1.geometry}
          material={materials.body}
        />
        <mesh
          name="Plane_2"
          castShadow
          receiveShadow
          geometry={nodes.Plane_2.geometry}
          material={materials.button}
        />
        <mesh
          name="Plane_3"
          castShadow
          receiveShadow
          geometry={nodes.Plane_3.geometry}
          material={materials.crack}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/tamagotchi.glb");
